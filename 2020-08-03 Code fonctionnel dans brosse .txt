
//Gyro - Arduino UNO R3
//VCC  -  5V
//GND  -  GND
//SDA  -  A4
//SCL  -  A5
//INT - port-2

#include <EEPROM.h>
#include <Wire.h>
#include <avr/wdt.h>
//Declaring some global variables
int gyro_x, gyro_y, gyro_z;
long gyro_x_cal, gyro_y_cal, gyro_z_cal;
boolean set_gyro_angles;

long acc_x, acc_y, acc_z, acc_total_vector;
float angle_roll_acc, angle_pitch_acc;

float angle_pitch, angle_roll;
int angle_pitch_buffer, angle_roll_buffer;
float angle_pitch_output, angle_roll_output;

long loop_timer;
int temp;

// ----------------------

long temps_debut_brossage;
long angle_mesure;
long temps_ech;
boolean etat_inclinaison;
boolean etat_moteur;
#define pin_moteur_relais1 12
#define pin_moteur_relais2 11
#define pin_seuil_inclinaison A1
#define pin_seuil_courant A2
#define pinCourant A0
int angle_declenchement = 20;
boolean etat_courant;
// periode d'Ã©chantillonnage en ms
#define MS_PERIOD_ECH  3

// temps de moyennage du courant
#define MS_MOYENNE    1000
//#define MS_BROSSAGE 1000000 // en microseconde pour test
#define MS_BROSSAGE 120000000 //en microseconde
#define MS_SURCOURANT 3000000 //en microseconde
#define MS_DEMARRAGE_MOTEUR 1500000 //en microseconde

int i = 0;
#define TAILLE_TABLEAU_ECHANTILLONS   (MS_MOYENNE / MS_PERIOD_ECH)
float echantillons[TAILLE_TABLEAU_ECHANTILLONS] = { 0 };

int indexEchantillonsCourant = 0;
int tension = 0;
int courant_max = 1300;

void setup()
{
	wdt_disable();
	wdt_enable(WDTO_8S);
	pinMode(pin_moteur_relais1, OUTPUT);
	pinMode(pin_moteur_relais2, OUTPUT);
	digitalWrite(pin_moteur_relais1, LOW);
	digitalWrite(pin_moteur_relais2, LOW);
	//if (analogRead(pin_seuil_inclinaison) >= 0.5)
	//{
	//	angle_declenchement = map(analogRead(pin_seuil_inclinaison), 0, 1023, 0, 45);
	//}
	//if (analogRead(pin_seuil_courant) >= 0.5)
	//{
	//	courant_max = map(analogRead(pin_seuil_courant), 0, 1023, 0, 5000);
	//}

	temps_debut_brossage = millis();
	temps_ech = millis();
	etat_inclinaison = 0;
	etat_moteur = 1;
	Wire.begin();                                                        //Start I2C as master
	setup_mpu_6050_registers();                                          //Setup the registers of the MPU-6050 
	for (int cal_int = 0; cal_int < 1000; cal_int++) {                  //Read the raw acc and gyro data from the MPU-6050 for 1000 times
		read_mpu_6050_data();
		gyro_x_cal += gyro_x;                                              //Add the gyro x offset to the gyro_x_cal variable
		gyro_y_cal += gyro_y;                                              //Add the gyro y offset to the gyro_y_cal variable
		gyro_z_cal += gyro_z;                                              //Add the gyro z offset to the gyro_z_cal variable
		delay(3);                                                          //Delay 3us to have 250Hz for-loop
	}

	// divide by 1000 to get avarage offset
	gyro_x_cal /= 1000;
	gyro_y_cal /= 1000;
	gyro_z_cal /= 1000;
	//Serial.begin(74880);
	loop_timer = micros();                                               //Reset the loop timer
}

void loop()
{
	read_mpu_6050_data();
	//Subtract the offset values from the raw gyro values
	gyro_x -= gyro_x_cal;
	gyro_y -= gyro_y_cal;
	gyro_z -= gyro_z_cal;

	//Gyro angle calculations . Note 0.0000611 = 1 / (250Hz x 65.5)
	angle_pitch += gyro_x * 0.0000611;                                   //Calculate the traveled pitch angle and add this to the angle_pitch variable
	angle_roll += gyro_y * 0.0000611;                                    //Calculate the traveled roll angle and add this to the angle_roll variable
	//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
	angle_pitch += angle_roll * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the roll angle to the pitch angel
	angle_roll -= angle_pitch * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the pitch angle to the roll angel

	//Accelerometer angle calculations
	acc_total_vector = sqrt((acc_x * acc_x) + (acc_y * acc_y) + (acc_z * acc_z));  //Calculate the total accelerometer vector
	//57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
	angle_pitch_acc = asin((float)acc_y / acc_total_vector) * 57.296;       //Calculate the pitch angle
	angle_roll_acc = asin((float)acc_x / acc_total_vector) * -57.296;       //Calculate the roll angle

	angle_pitch_acc -= 0.0;                                              //Accelerometer calibration value for pitch
	angle_roll_acc -= 0.0;                                               //Accelerometer calibration value for roll

	if (set_gyro_angles) {                                                 //If the IMU is already started
		angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
		angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
	}
	else {                                                                //At first start
		angle_pitch = angle_pitch_acc;                                     //Set the gyro pitch angle equal to the accelerometer pitch angle 
		angle_roll = angle_roll_acc;                                       //Set the gyro roll angle equal to the accelerometer roll angle 
		set_gyro_angles = true;                                            //Set the IMU started flag
	}

	//To dampen the pitch and roll angles a complementary filter is used
	angle_pitch_output = angle_pitch_output * 0.9 + angle_pitch * 0.1;   //Take 90% of the output pitch value and add 10% of the raw pitch value
	angle_roll_output = angle_roll_output * 0.9 + angle_roll * 0.1;      //Take 90% of the output roll value and add 10% of the raw roll value
   // Serial.print(" | Angle  = "); Serial.println(angle_pitch_output);

	angle_mesure = max(abs(angle_pitch_output), abs(angle_roll_output));

	if (etat_moteur == 1)
	{
		echantillonnagecourant();
		if (tension > courant_max || ((micros() - temps_debut_brossage > MS_BROSSAGE) && angle_mesure < angle_declenchement))
		{
			MoteursOff();
		}
		else if ((micros() - temps_debut_brossage > MS_BROSSAGE) && angle_mesure >= angle_declenchement) {
			temps_debut_brossage = micros();
			//Serial.print(" | Angle relance : "); Serial.println(tension);
		}
	}
	else if (angle_mesure >= angle_declenchement && etat_moteur == 0)
	{
		MoteursOn();
	}
	while (micros() - loop_timer < 4000);                                 //Wait until the loop_timer reaches 4000us (250Hz) before starting the next loop
	loop_timer = micros();//Reset the loop timer
	wdt_reset();
}
void MoteursOff()
{
	temps_debut_brossage = micros();
	digitalWrite(pin_moteur_relais1, HIGH);
	digitalWrite(pin_moteur_relais2, HIGH);
	etat_moteur = 0;
	echantillons[TAILLE_TABLEAU_ECHANTILLONS] = { 0 };
	tension = 0;
	while (micros() - temps_debut_brossage < MS_SURCOURANT)
	{
	}
}
void MoteursOn()
{
	temps_debut_brossage = micros();
	etat_moteur = 1;
	digitalWrite(pin_moteur_relais1, LOW);
	digitalWrite(pin_moteur_relais2, LOW);
	while (micros()-temps_debut_brossage<MS_DEMARRAGE_MOTEUR)
	{
	}
}
void echantillonnagecourant()
{
	echantillons[indexEchantillonsCourant] = map(analogRead(pinCourant), 0, 1023, 0, 5000);
	for (i = 0; i < TAILLE_TABLEAU_ECHANTILLONS; i++)
	{
		tension += echantillons[i] * echantillons[i];
	}
	tension = sqrt(tension / TAILLE_TABLEAU_ECHANTILLONS);
	indexEchantillonsCourant++;
	if (indexEchantillonsCourant == TAILLE_TABLEAU_ECHANTILLONS)
	{
		indexEchantillonsCourant = 0;
	}
}
void setup_mpu_6050_registers() {
	//Activate the MPU-6050
	Wire.beginTransmission(0x68);                                        //Start communicating with the MPU-6050
	Wire.write(0x6B);                                                    //Send the requested starting register
	Wire.write(0x00);                                                    //Set the requested starting register
	Wire.endTransmission();
	//Configure the accelerometer (+/-8g)
	Wire.beginTransmission(0x68);                                        //Start communicating with the MPU-6050
	Wire.write(0x1C);                                                    //Send the requested starting register
	Wire.write(0x10);                                                    //Set the requested starting register
	Wire.endTransmission();
	//Configure the gyro (500dps full scale)
	Wire.beginTransmission(0x68);                                        //Start communicating with the MPU-6050
	Wire.write(0x1B);                                                    //Send the requested starting register
	Wire.write(0x08);                                                    //Set the requested starting register
	Wire.endTransmission();
}

void read_mpu_6050_data() {                                             //Subroutine for reading the raw gyro and accelerometer data
	Wire.beginTransmission(0x68);                                        //Start communicating with the MPU-6050
	Wire.write(0x3B);                                                    //Send the requested starting register
	Wire.endTransmission();                                              //End the transmission
	Wire.requestFrom(0x68, 14);                                           //Request 14 bytes from the MPU-6050
	while (Wire.available() < 14);                                        //Wait until all the bytes are received
	acc_x = Wire.read() << 8 | Wire.read();
	acc_y = Wire.read() << 8 | Wire.read();
	acc_z = Wire.read() << 8 | Wire.read();
	temp = Wire.read() << 8 | Wire.read();
	gyro_x = Wire.read() << 8 | Wire.read();
	gyro_y = Wire.read() << 8 | Wire.read();
	gyro_z = Wire.read() << 8 | Wire.read();
}